program Practice;

{$APPTYPE CONSOLE}

{$R *.res}

uses
  System.SysUtils;

type
  TWeekDay = (Mon, Tue, Wed, Thu, Fri, Sat, Sun);
  TWorkDay = Mon..Sat;
  TWorkHours = record
    start: TTime;
    finish: TTime;
  end;
  TSchedule = array[TWeekDay] of TWorkHours;
  TTalonListPt = ^TTalonlist;
  TTalon = Record
    date: Tdate;
    time: TTime;
    queuePos: integer;
    patientLastName: String[255];
    cabNum: Integer;
    docKey: Integer;
  End;
  TTalonList = record
    Talon: TTalon;
    next: TTalonListPt;
  end;
  TDocListPt = ^TDocList;
  TDoc = record
    docKey: Integer;
    specialisation: String[255];
    docLastName: String[255];
    cab: integer;
    Schedule: TSchedule;
  end;
  TDocList = record
    Doc: TDoc;
    next: TDocListPt;
  end;
  TTalonSearchComp = function(temp: TTalonListPt; const Value): boolean;
  TDocSearchComp = function(temp: TDocListPt; const Value): boolean;
  TTalonSortComp = function(a, b: TTalonListPt): boolean;
  TDocSortComp = function(a, b: TDocListPt): boolean;
  TTalonArr = array of TTalonListPt;
  TDocArr = array of TDocListPt;
  TTalonFile = file of TTalon;
  TDocFile = file of TDoc;
  TDocDate = record
    code: integer;
    Date: TDate;
  end;          
  TDocNameDate = record
    name: string;
    Date: TDate;
  end;
  TSpecDate = record
    spec: string;
    Date: TDate;
  end;

const
  WeekNames: array[TWeekDay] of String = ('Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье');
  MonthDays: array[1..12] of integer = (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);

function isDigit(c: char): boolean;
begin
  result := (c >= '0') and (c <= '9');
end;

function correctDate(s: string): boolean;
var
  D, M, Y: integer;
begin
  result := true;
  if length(s) <> 10 then
    result := false
  else if (s[3] <> '.') or (s[6] <> '.') then
    result := false
  else if not(isDigit(s[1]) and isDigit(s[2]) and isDigit(s[4]) and isDigit(s[5]) and
    isDigit(s[7]) and isDigit(s[8]) and isDigit(s[9]) and isDigit(s[10])) then
    result := false
  else
  begin
    D := StrToInt(Copy(S, 1, 2));
    M := StrToInt(Copy(S, 4, 2));
    Y := StrToInt(Copy(S, 7, 4));
    if (Y = 0) or (M = 0) or (D = 0) then
      result := false;
    if (Y < 1900) or (Y > 2025) then
      result := false;
    if M > 12 then
      result := false;
    if D > MonthDays[M] then
      if not ((M = 2) and ((Y mod 400 = 0) or ((Y mod 100 <> 0) and (Y mod 4 = 0))) and (D <= 29)) then
        result := false;
  end;
end;

function correctTime(s: string): boolean;
var
  H, M: integer;
begin
  result := true;
  if length(s) <> 5 then
    result := false
  else if (s[3] <> ':') then
    result := false
  else if not(isDigit(s[1]) and isDigit(s[2]) and isDigit(s[4]) and isDigit(s[5])) then
    result := false
  else
  begin
    H := StrToInt(Copy(S, 1, 2));
    M := StrToInt(Copy(S, 4, 2));
    if M > 59 then
      result := false;
    if H > 24 then
      result := false;
  end;
end;

procedure InputMenu(const n: Integer; var Chose: integer);
var
  flag: boolean;
  temp: string;
  code: Integer;
begin
  flag := false;
  repeat
    readln(temp);
    Val(temp, chose, code);
    if code <> 0 then
      writeln('Введите число')
    else
    begin
      if (chose < 1) or (chose > n) then
        writeln('Введите число от 1 до ', n)
      else
        flag := true;
    end;
  until flag;
end;

procedure InputDate(AMessage, AWrongMessage: String; var Date: TDate);
var
  flag: boolean;
  temp: string;
begin
  flag := true;
  repeat
    write(AMessage);
    readln(temp);
    if not correctDate(temp) then
      writeln(AWrongMessage)
    else
      flag := false;
  until not flag;
  Date := StrToDate(temp);
end;

procedure InputTime(AMessage, AWrongMessage: String; var Time: TTime);
var
  flag: boolean;
  temp: string;
begin
  flag := true;
  repeat
    write(AMessage);
    readln(temp);
    if not correctTime(temp) then
      writeln(AWrongMessage)
    else
      flag := false;
  until not flag;
  Time := StrToTime(temp);
end;

function TalonListSize(head: TTalonListPt): integer;
begin
  result := 0;   
  head := head^.next;
  while head <> nil do
  begin
    Inc(result);
    head := head^.next;
  end;
end;

function DocListSize(head: TDocListPt): integer;
begin
  result := 0;
  head := head^.next;
  while head <> nil do
  begin
    Inc(result);
    head := head^.next;
  end;
end;

function GetTalon(head: TTalonListPt; num: integer): TTalonListPt;
var
  temp: TTalonListPt;
  i: Integer;
begin
  temp := head^.next;
  for i := 1 to num - 1 do
    temp := temp^.next;
  result := temp;
end;

function GetDoc(head: TDocListPt; num: integer): TDocListPt;
var
  temp: TDocListPt;
  i: Integer;
begin
  temp := head^.next;
  for i := 1 to num - 1 do
    temp := temp^.next;
  result := temp;
end;

procedure printTalon(temp: TTalon);
begin
  writeln('Дата: ', DateToStr(temp.date));
  writeln('Время: ', TimeToStr(temp.time));
  writeln('№ в очереди: ', temp.queuePos);
  writeln('ФИО пациента: ', temp.patientLastName);
  writeln('Кабинет: ', temp.cabNum);
  writeln('Код врача: ', temp.docKey);
end;

procedure printDoc(temp: TDoc);
begin
  writeln('Код: ', temp.docKey);
  writeln('Специализация: ', temp.specialisation);
  writeln('ФИО врача: ', temp.docLastName);
  writeln('Кабинет: ', temp.cab);
  writeln('График работы:');
  for var i := Mon to Sat do
  begin
    if temp.Schedule[i].start >= temp.Schedule[i].finish then
      writeln('  ', WeekNames[i], ': ', 'Не работает')
    else
      writeln('  ', WeekNames[i], ': ', TimeToStr(temp.Schedule[i].start), '-', TimeToStr(temp.Schedule[i].finish));
  end;
end;

procedure printTalonList(const Head: TTalonListPt);
var
  temp: TTalonListPt;
  i: integer;
begin
  if Head^.next = nil then
    writeln('Список пуст');
  temp := head^.next;
  i := 1;
  while temp <> nil do
  begin
    writeln(i, ')');
    printTalon(temp^.Talon);
    writeln;
    temp := temp^.next;
    Inc(i);
  end;
end;

procedure printDocList(const Head: TDocListPt);
var
  temp: TDocListPt;
  i: integer;
begin
  if Head^.next = nil then
    writeln('Список пуст');
  temp := head^.next;
  i := 1;
  while temp <> nil do
  begin
    writeln(i, ')');
    printDoc(temp^.Doc);
    writeln;
    Inc(i);
    temp := temp^.next;
  end;
end;

//SORTING

function sortCompTalonName(a, b: TTalonListPt): boolean;
begin
  result := a^.Talon.patientLastName <= b^.Talon.patientLastName;
end;

function sortCompTalonDate(a, b: TTalonListPt): boolean;
begin
  result := a^.Talon.Date <= b^.Talon.Date;
end;

function sortCompTalonKey(a, b: TTalonListPt): boolean;
begin
  result := a^.Talon.dockey <= b^.Talon.dockey;
end;

function MergeSortedTalons(list1, list2: TTalonListPt; Comp: TTalonSortComp): TTalonListPt;
var
  pCur, p1, p2: TTalonListPt;
begin
  p1 := list1;
  p2 := list2;
  if Comp(p1, p2) then
  begin
    pCur := p1;
    p1 := p1^.next;
  end
  else
  begin
    pCur := p2;
    p2 := p2^.next;
  end;
  Result := pCur;
  while (p1 <> nil) and (p2 <> nil) do
  begin
    if Comp(p1, p2) then
      begin
        pCur^.Next := p1;
        pCur := p1;
        p1 := p1^.Next;
      end
      else begin
        pCur^.Next := p2;
        pCur := p2;
        p2 := p2^.Next;
      end;
  end;
  if p1 <> nil then
    pCur^.Next := p1
  else
    pCur^.Next := p2;
end;

procedure SortTalons(TalonList: TTalonListPt; Comp: TTalonSortComp);
type
  TStackItem = record
    level: integer;
    Item: TTalonListPt;
  end;
  TStack = array[0..31] of TStackItem;

var
  Stack: TStack;
  StackPos: Integer;
  p: TTalonListPt;
begin
  StackPos := 0;
  p := TalonList^.next;
  while p <> nil do
  begin
    Stack[StackPos].level := 1;
    Stack[StackPos].Item := p;
    p := p^.next;
    Stack[StackPos].Item^.next := nil;
    Inc(StackPos);
    while (StackPos >= 2) and (Stack[StackPos - 1].Level = Stack[StackPos - 2].level) do
    begin
      Stack[StackPos - 2].Item := MergeSortedTalons(Stack[StackPos - 1].Item, Stack[StackPos - 2].Item, Comp);
      Inc(Stack[StackPos - 2].level);
      Dec(StackPos);
    end;
  end;
  while (StackPos >= 2) do
  begin
    Stack[StackPos - 2].Item := MergeSortedTalons(Stack[StackPos - 1].Item, Stack[StackPos - 2].Item, Comp);
    Inc(Stack[StackPos - 2].level);
    Dec(StackPos);
  end;
  if StackPos > 0 then
  begin
    TalonList^.next := Stack[0].Item;
  end;
end;

function sortCompDocName(a, b: TDocListPt): boolean;
begin
  result := a^.Doc.docLastName <= b^.Doc.docLastName;
end;

function sortCompDocSpecialisation(a, b: TDocListPt): boolean;
begin
  result := a^.Doc.specialisation <= b^.Doc.specialisation;
end;

function sortCompDocKey(a, b: TDocListPt): boolean;
begin
  result := a^.Doc.docKey <= b^.Doc.docKey;
end;

function MergeSortedDocs(list1, list2: TDocListPt; Comp: TDocSortComp): TDocListPt;
var
  pCur, p1, p2: TDocListPt;
begin
  p1 := list1;
  p2 := list2;
  if Comp(p1, p2) then
  begin
    pCur := p1;
    p1 := p1^.next;
  end
  else
  begin
    pCur := p2;
    p2 := p2^.next;
  end;
  Result := pCur;
  while (p1 <> nil) and (p2 <> nil) do
  begin
    if Comp(p1, p2) then
      begin
        pCur^.Next := p1;
        pCur := p1;
        p1 := p1^.Next;
      end
      else begin
        pCur^.Next := p2;
        pCur := p2;
        p2 := p2^.Next;
      end;
  end;
  if p1 <> nil then
    pCur^.Next := p1
  else
    pCur^.Next := p2;
end;

procedure SortDocs(DocList: TDocListPt; Comp: TDocSortComp);
type
  TStackItem = record
    level: integer;
    Item: TDocListPt;
  end;
  TStack = array[0..31] of TStackItem;

var
  Stack: TStack;
  StackPos: Integer;
  p: TDocListPt;
begin
  StackPos := 0;
  p := DocList^.next;
  while p <> nil do
  begin
    Stack[StackPos].level := 1;
    Stack[StackPos].Item := p;
    p := p^.next;
    Stack[StackPos].Item^.next := nil;
    Inc(StackPos);
    while (StackPos >= 2) and (Stack[StackPos - 1].Level = Stack[StackPos - 2].level) do
    begin
      Stack[StackPos - 2].Item := MergeSortedDocs(Stack[StackPos - 1].Item, Stack[StackPos - 2].Item, Comp);
      Inc(Stack[StackPos - 2].level);
      Dec(StackPos);
    end;
  end;
  while (StackPos >= 2) do
  begin
    Stack[StackPos - 2].Item := MergeSortedDocs(Stack[StackPos - 1].Item, Stack[StackPos - 2].Item, Comp);
    Inc(Stack[StackPos - 2].level);
    Dec(StackPos);
  end;
  if StackPos > 0 then
  begin
    DocList^.next := Stack[0].Item;
  end;
end;

//SEARCH


function searchCompTalonDocDate(temp: TTalonListPt; const Value): boolean;
begin
  result := (temp^.Talon.date = TDocDate(Value).Date) and (temp^.Talon.docKey = TDocDate(Value).code);
end;

function searchCompTalonDate(temp: TTalonListPt; const Value): boolean;
begin
  result := (temp^.Talon.date = TDate(Value));
end;

function searchCompTalonDocKey(temp: TTalonListPt; const Value): boolean;
begin
  result := (temp^.Talon.docKey = Integer(Value));
end;

function searchCompTalonName(temp: TTalonListPt; const Value): boolean;
begin
  result := (temp^.Talon.patientLastName = String(Value));
end;

function searchCompTalonDocDateFree(temp: TTalonListPt; const Value): boolean;
begin
  result := (temp^.Talon.date = TDocDate(Value).Date) and (temp^.Talon.docKey = TDocDate(Value).code)
            and (temp^.Talon.patientLastName = '');
end;

function SearchTalon(const Head: TTalonListPt; const Comp: TTalonSearchComp; const Value): TTalonArr;
var
  temp: TTalonListPt;
begin
  SetLength(result, 0);
  temp := head.next;
  while temp <> nil do
  begin
    if comp(temp, Value) then
    begin
      SetLength(result, length(result) + 1);
      result[High(result)] := temp;
    end;
    temp := temp^.next;
  end;
end;

function searchCompDocKey(temp: TDocListPt; const Value): boolean;
begin
  result := temp^.Doc.docKey = Integer(Value);
end;

function searchCompDocSpecialisation(temp: TDocListPt; const Value): boolean;
begin
  result := temp^.Doc.specialisation = String(Value);
end;

function searchCompDocName(temp: TDocListPt; const Value): boolean;
begin
  result := temp^.Doc.doclastName = String(Value);
end;

function searchCompDocCab(temp: TDocListPt; const Value): boolean;
begin
  result := temp^.Doc.cab = Integer(Value);
end;

function SearchDoc(const Head: TDocListPt; const Comp: TDocSearchComp; const Value): TDocArr;
var
  temp: TDocListPt;
begin
  SetLength(result, 0);
  temp := head.next;
  while temp <> nil do
  begin
    if comp(temp, Value) then
    begin
      SetLength(result, length(result) + 1);
      result[High(result)] := temp;
    end;
    temp := temp^.next;
  end;
end;

function MakeTalon(const TalonList: TTalonListPt; const docList: TDocListPt;
                    const Date: TDate; const Time: TTime; const patient: String;
                    const docKey: Integer; var ErrorCode: Integer): TTalon;
var
  DocArr: TDocArr;
  TalonArr: TTalonArr;
  WeekDay: TWeekDay;
  temp: Word;
begin
  errorCode := 0;
  result.date := Date;
  result.time := Time;
  result.patientLastName := patient;
  result.docKey := docKey;
  DocArr := searchDoc(docList, searchCompDocKey, docKey);
  result.cabNum := DocArr[0].Doc.cab;
  temp := DayOfWeek(Date) - 1;
  if temp = 0 then
    temp := 6
  else
    Dec(temp);
  WeekDay := TWeekDay(temp);
  if length(DocArr) = 0 then
    errorCode := 1
  else if (WeekDay = Sun) or (Time < DocArr[0]^.Doc.Schedule[WeekDay].start) or (Time > DocArr[0]^.Doc.Schedule[WeekDay].finish) then
      errorCode := 2
  else
  begin
    TalonArr := searchTalon(TalonList, searchCompTalonDocKey, docKey);
    result.queuePos := 1;
    for var i := Low(TalonArr) to High(TalonArr) do
    begin
      if TalonArr[i]^.Talon.date = Date then
      begin
        if TalonArr[i]^.Talon.time = Time then
          errorCode := 3;
      end;
    end;
    if errorCode = 0 then
    begin
      if patient = '' then
      begin
        result.queuePos := 0;
        Exit;
      end;
      for var i := Low(TalonArr) to High(TalonArr) do
      begin
        if TalonArr[i]^.Talon.date = Date then
        begin
          if (TalonArr[i]^.Talon.time < Time) and (TalonArr[i]^.Talon.patientLastName <> '') then
            Inc(result.queuePos);
          if (TalonArr[i]^.Talon.time > Time) and (TalonArr[i]^.Talon.patientLastName <> '') then
            Inc(TalonArr[i]^.Talon.queuePos);
        end;
      end;
    end;
  end;
end;

procedure addTalon(const Head: TTalonListPt; Talon: TTalon);
var
  temp: TTalonListPt;
begin
  temp := head;
  while temp^.next <> nil do
    temp := temp^.next;
  New(temp^.next);
  temp := temp^.next;
  temp^.next := nil;
  temp^.Talon := Talon;
end;

function MakeDoc(var MaxKey: Integer; const Aspecialisation, AName: String; acab: integer; const ASchedule: TSchedule): TDoc;
begin
  Inc(MaxKey);
  with result do
  begin
    docKey := MaxKey;
    specialisation := ASpecialisation;
    docLastName := AName;
    cab := acab;
    Schedule := ASchedule;
  end;
end;

procedure addDoc(const Head: TDocListPt; Doc: TDoc);
var
  temp: TDocListPt;
begin
  temp := head;
  while temp^.next <> nil do
    temp := temp^.next;
  New(temp^.next);
  temp := temp^.next;
  temp^.next := nil;
  temp^.Doc := Doc;
end;

procedure DeleteTalon(const Head: TTalonListPt; DocList: TDocListPt; num: integer);
var
  temp, temp1: TTalonListPt;
  DocDate: TDocDate;
  TalonArr: TTalonArr;
begin
  temp := head;
  for var i := 1 to num - 1 do
  begin
    temp := temp^.next;
  end;
  DocDate.code := temp^.next^.Talon.docKey;
  DocDate.Date := temp^.next^.Talon.Date;
  TalonArr := searchTalon(head, searchCompTalonDocDate, DocDate);
  if temp^.next^.Talon.patientLastName <> '' then
  begin
    for var i := 0 to High(TalonArr) do
    begin
      if (TalonArr[i]^.Talon.time > temp^.next^.Talon.time) and (TalonArr[i]^.Talon.patientLastName <> '') then
        Dec(TalonArr[i]^.Talon.queuePos);
    end;
  end;
  temp1 := temp^.next;
  temp^.next := temp1^.next;
  Dispose(temp1);
end;

procedure DeleteDoc(const Head: TDocListPt; TalonList: TTalonListPt; num: integer);
var
  temp, del: TDocListPt;
  TalonArr: TTalonArr;
begin
  temp := head;
  for var i := 1 to num - 1 do
    temp := temp^.next;
  del := temp^.next;
  TalonArr := searchTalon(TalonList, searchCompTalonDocKey, del^.Doc.docKey);
  if length(TalonArr) > 0 then
  begin
    writeln('Невозможно удалить запись. К этому врачу есть талоны.');
    Exit;
  end;
  temp^.next := del^.next;
  Dispose(del);
end;

procedure MainMenu;
begin
  writeln('Главное меню:');
  writeln('[1] - Чтение данных из файла.');
  writeln('[2] - Просмотр всего списка.');
  writeln('[3] - Сортировка данных.');
  writeln('[4] - Поиск данных.');
  writeln('[5] - Добавление данных в список.');
  writeln('[6] - Удаление данных из списка.');
  writeln('[7] - Редактирование данных.');
  writeln('[8] - Работа с талонами.');
  writeln('[9] - Выход без сохранения изменений.');
  writeln('[10] - Выход с сохранением изменений.');
end;

procedure chooseListMenu;
begin
  writeln('Выберите список');
  writeln('[1] - Список талонов.');
  writeln('[2] - Список врачей.');
  writeln('[3] - В главное меню.');
end;

procedure Filters;
begin
  writeln('[1] - К врачу на дату.');
  writeln('[2] - Талон по ФИО пациента.');
  writeln('[3] - В главное меню.');
end;

procedure LookList(TalonList: TTalonListPt; DocList: TDocListPt);
var
  chose: integer;
begin
  chooseListMenu;
  InputMenu(3, chose);
  case chose of
  1:
    printTalonList(TalonList);
  2:
    printDocList(DocList);
  end;
end;

procedure SortList(TalonList: TTalonListPt; DocList: TDocListPt);
var
  chose: integer;
  TalonComp: TTalonSortComp;
  DocComp: TDocSortComp;
begin
  chooseListMenu;
  InputMenu(3, chose);
  case chose of
  1:
  begin
    writeln('[1] - По ФИО пациента');
    writeln('[2] - По дате');
    writeln('[3] - По коду врача');
    InputMenu(3, chose);
    case chose of
    1:
      TalonComp := sortCompTalonName;
    2:
      TalonComp := sortCompTalonDate;
    3:
      TalonComp := sortCompTalonKey;
    end;
    SortTalons(TalonList, TalonComp);
  end;
  2:
  begin
    writeln('[1] - По ФИО врача');
    writeln('[2] - По специализации');
    writeln('[3] - По коду врача');
    InputMenu(3, chose);
    case chose of
    1:
      DocComp := sortCompDocName;
    2:
      DocComp := sortCompDocSpecialisation;
    3:
      DocComp := sortCompDocKey;
    end;
    SortDocs(DocList, DocComp);
  end;
  end;
end;

procedure searchList(TalonList: TTalonListPt; DocList: TDocListPt);
var
  chose: integer;
  Date: TDate;
  TalonArr: TTalonArr;
  DocArr: TDocArr;
  temp: String;
  Found: boolean;
  DocDate: TDocDate;
begin
  Filters;
  InputMenu(2, chose);
  Found := false;
  case chose of
  1:
  begin
    InputDate('Введите дату(формат DD.MM.YYYY): ', 'Некорректный ввод', Date);
    Write('Введите ФИО: ');
    Readln(temp);
    DocArr := searchDoc(DocList, searchCompDocName, temp);
    for var i := 0 to High(DocArr) do
    begin
      with DocArr[i]^.Doc do
      begin
        DocDate.code := docKey;
        DocDate.Date := Date;
        TalonArr := searchTalon(TalonList, searchCompTalonDocDate, DocDate);
        for var j := 0 to High(TalonArr) do
        begin
          Found := True;
          PrintTalon(TalonArr[j].Talon);
          writeln;
        end;
      end;
    end;
  end;
  2:
  begin
    Write('Введите ФИО: ');
    Readln(temp);
    TalonArr := searchTalon(TalonList, searchCompTalonName, temp);
    for var j := 0 to High(TalonArr) do
    begin
      Found := True;
      PrintTalon(TalonArr[j].Talon);
      writeln;
    end;   
  end;
  else Found := true;
  end;
  if not Found then
    writeln('Записи не найдены');
end;

procedure AddList(TalonList: TTalonListPt; DocList: TDocListPt; MaxKey: Integer);
var
  chose: integer;
  Date: TDate;
  Time: TTime;
  docKey: Integer;
  specialisation, Name: String;
  ErrorCode: Integer;
  Talon: TTalon;
  Doc: TDoc;
  Schedule: TSchedule;
  flag: boolean;

begin
  chooseListMenu;
  InputMenu(3, chose);
  case chose of
  1:
  begin
    InputDate('Введите дату(формат DD.MM.YYYY): ', 'Некорректный ввод', Date);
    InputTime('Введите время(формат HH:MM): ', 'Некорректный ввод', Time);
    write('Введите ФИО пациента(Оставьте пустым если талон не выдан): ');
    readln(Name);
    write('Введите код врача: ');
    InputMenu(999, docKey);
    errorCode := 0;
    Talon := makeTalon(TalonList, DocList, Date, Time, Name, docKey, ErrorCode);
    printTalon(Talon);
    writeln(errorCode);
    case errorcode of
    1:
      writeln('Такого врача не существует');
    2:
      writeln('в это время врач не работает');
    3:
      writeln('Талон к этому врачу на данное время уже выдан');
    else
      AddTalon(TalonList, Talon);
    end;
  end;
  2:
  begin
    writeln('Введите специализацию врача: ');
    readln(specialisation);
    writeln('Введите ФИО врача: ');
    readln(Name);
    writeln('Введите кабинет врача: ');
    InputMenu(999, chose);
    writeln('Введите расписание: ');
    for var i := Mon to Sat do
    begin
      writeln(WeekNames[i], ': ');
      writeln('Врач работает в этот день(1 если да, 2 если нет):');
      InputMenu(2, Chose);
      if chose = 2 then
      begin
        Schedule[i].start := StrToTime('09:00');
        Schedule[i].finish := StrToTime('08:00');
      end
      else
      begin
        flag := false;
        repeat
          InputTime('Начало работы: ', 'Некорректный ввод', Schedule[i].start);
          InputTime('Конец работы: ', 'Некорректный ввод', Schedule[i].finish);
          if Schedule[i].start >= Schedule[i].finish then
          begin
            writeln('Время начала должно быть раньше времени конца');
          end
          else
            flag := true;
        until flag;
      end;
    end;
    Doc := MakeDoc(MaxKey, specialisation, Name, chose, Schedule);
    AddDoc(DocList, Doc);
  end;
  end;
end;

procedure DeleteList(TalonList: TTalonListPt; DocList: TDocListPt);
var
  chose: integer;
  size: integer;
begin
  chooseListMenu;
  InputMenu(3, chose);
  case chose of
  1:
  begin
    printTalonList(TalonList);
    size := TalonListSize(TalonList);
    if size > 0 then
    begin
      write('Введите номер записи для удаления');
      InputMenu(size, chose);
      DeleteTalon(TalonList, DocList, chose);
    end;
  end;

  2:
  begin
    printDocList(DocList);
    size := DocListSize(DocList);
    if size > 0 then
    begin
      write('Введите номер записи для удаления');
      InputMenu(size, chose);
      DeleteDoc(DocList, TalonList, chose);
    end;
  end;
  end;
end;

procedure ChangeList(TalonList: TTalonListPt; DocList: TDocListPt);
var
  newTalon: TTalon;
  newDoc: TDoc;
  TalonArr: TTalonArr;
  DocArr: TDocArr;
  DocDate: TDocDate;
  TalonPt: TTalonListPt;
  DocPt: TDocListPt;
  diff, size, chose: integer;
  temp: Word;
  WeekDay: TweekDay;
  flag: boolean;
  Schedule: TSchedule;

begin
  chooseListMenu;
  InputMenu(3, chose);
  case chose of
  1:
  begin
    printTalonList(TalonList);
    size := TalonListSize(TalonList);
    if size > 0 then
    begin
      write('Введите номер записи для изменения');
      InputMenu(size, Chose);
      TalonPt := GetTalon(TalonList, chose);
      newTalon := TalonPt^.Talon;
      writeln('[1] - Изменить ФИО пациента');
      writeln('[2] - Изменить время');
      writeln('[3] - Изменить дату');
      writeln('[4] - Изменить код врача');
      InputMenu(4, chose);
      case chose of
      1:
      begin
        write('Введите новое ФИО: ');
        readln(newTalon.patientLastName);
      end;
      3:
      begin
        InputDate('Введите новую дату(формат DD.MM.YYYY): ', 'Некорректный ввод', newTalon.Date);
      end;
      2:
      begin
        InputTime('Введите новое время(формат HH:MM): ', 'Некорректный ввод', newTalon.Time);
      end;
      4:
      begin
        write('Введите новый код врача: ');
        InputMenu(999, newTalon.docKey);
      end;
      end;
      DocDate.code := newTalon.docKey;
      DocDate.Date := newTalon.Date;
      DocArr := SearchDoc(DocList, searchCompDocKey, newTalon.docKey);
      if Length(docArr) = 0 then
      begin
        writeln('Врача не существует');
        Exit;
      end;

      newTalon.cabNum := DocArr[0]^.Doc.cab;
      temp := DayOfWeek(newTalon.Date) - 1;
      if temp = 0 then
        temp := 6
      else
        Dec(temp);
      WeekDay := TWeekDay(temp);
      if (NewTalon.time < DocArr[0]^.Doc.Schedule[WeekDay].start) or
          (NewTalon.time >= DocArr[0]^.Doc.Schedule[WeekDay].finish) then
      begin
        writeln('Врач в это время не принимает');
        Exit;
      end;
      TalonArr := SearchTalon(TalonList, searchCompTalonDocDate, DocDate);
      for var i := 0 to High(TalonArr) do
      begin
        if (TalonArr[i]^.Talon.time = newTalon.time) and (TalonArr[i] <> TalonPt)  then
        begin
          writeln('Такой талон уже существует');
          Exit;
        end;
      end;
      newTalon.queuePos := 1;
      if newTalon.patientLastName = '' then
      begin
        newTalon.queuePos := 0;
      end
      else
      begin
        for var i := 0 to High(TalonArr) do
        begin
          if (TalonArr[i]^.Talon.time > newTalon.time) and (TalonArr[i]^.Talon.patientLastName <> '') then
            Inc(TalonArr[i]^.Talon.queuePos);
          if (TalonArr[i]^.Talon.time < newTalon.time) and (TalonArr[i] <> TalonPt)
             and (TalonArr[i]^.Talon.patientLastName <> '') then
            Inc(newTalon.queuePos);
        end;
      end;
      DocDate.code := TalonPt^.Talon.docKey;
      DocDate.Date := TalonPt^.Talon.Date;
      TalonArr := SearchTalon(TalonList, searchCompTalonDocDate, DocDate);
      if TalonPt^.Talon.patientLastName <> '' then
        for var i := 0 to High(TalonArr) do
        begin
          if (TalonArr[i]^.Talon.time > TalonPt^.Talon.time) and (TalonArr[i]^.Talon.patientLastName <> '') then
            Dec(TalonArr[i]^.Talon.queuePos);
        end;
      TalonPt^.Talon := newTalon;
    end;
  end;
  2:
  begin
    printDocList(DocList);
    size := DocListSize(DocList);
    if size > 0 then
    begin
      write('Введите номер записи для изменения: ');
      InputMenu(size, chose);
      DocPt := GetDoc(DocList, chose);
      TalonArr := searchTalon(TalonList, searchCompTalonDocKey, DocPt^.Doc.docKey);
      if Length(TalonArr) <> 0 then
      begin
        writeln('Изменение невозможно, к врачу есть талоны');
        Exit;
      end;
      writeln('[1] - Изменить ФИО');
      writeln('[2] - Изменить Специализацию');
      writeln('[3] - Изменить График');
      writeln('[4] - Изменить Кабинет');
      InputMenu(4, chose);
      case chose of
      1:
      begin
        write('Новое ФИО: ');
        readln(DocPt^.Doc.docLastName);
      end;
      2:
      begin
        write('Новая специализация: ');
        readln(DocPt^.Doc.specialisation);
      end;
      3:
      begin
        writeln('Новый график: ');
        for var i := Mon to Sat do
        begin
          writeln(WeekNames[i], ': ');
          writeln('Врач работает в этот день(1 если да, 2 если нет):');
          InputMenu(2, Chose);
          if chose = 2 then
          begin
            Schedule[i].start := StrToTime('09:00');
            Schedule[i].finish := StrToTime('08:00');
          end
          else
          begin
            flag := false;
            repeat
              InputTime('Начало работы: ', 'Некорректный ввод', Schedule[i].start);
              InputTime('Конец работы: ', 'Некорректный ввод', Schedule[i].finish);
              if Schedule[i].start >= Schedule[i].finish then
              begin
                writeln('Время начала должно быть раньше времени конца');
              end
              else
                flag := true;
            until flag;
          end;
        end;
        DocPt^.Doc.Schedule := Schedule;
      end;
      4:
      begin
        writeln('Новый кабинет: ');
        InputMenu(999, chose);
        DocArr := searchDoc(DocList, searchCompDocCab, chose);
        if Length(DocArr) <> 0 then
        begin
          writeln('Кабинет занят');
          Exit;
        end;
        DocPt^.Doc.cab := chose;
      end;
      end;
    end;
  end;
  end;
end;

procedure SpecialFunctions(TalonList: TTalonListPt; DocList: TDoclistPt);
var
  Chose: integer;
  Date: TDate;
  temp: Word;
  Time: TTime;
  Talon: TTalon;
  WeekDay: TWeekDay;
  tempDoc: TDocListPt;
  errorCode, count: integer;
  spec, name: string;
  DocArr: TDocArr;
  TalonArr: TTalonArr;
  DocDate: TDocDate;
  tempList: TTalonListPt;
begin
  writeln('[1] - Генерация талонов на неделю');
  writeln('[2] - Выдача талонов');
  writeln('[3] - В главное меню');
  InputMenu(3, chose);
  case chose of
  1:
  begin
    InputDate('Введите дату(формат DD.MM.YYYY): ', 'Некорректный ввод', Date);
    tempDoc := DocList^.next;
    while tempDoc <> nil do
    begin
      for var i := 0 to 6 do
      begin
        temp := DayOfWeek(Date + i) - 1;
        if temp = 0 then
          temp := 6
        else
          Dec(temp);
        WeekDay := TWeekDay(temp);
        if WeekDay <> Sun then
        begin
          Time := tempDoc^.Doc.Schedule[WeekDay].start;
          while Time < tempDoc^.Doc.Schedule[WeekDay].finish do
          begin
            Talon := MakeTalon(TalonList, DocList, Date + i, Time, '', tempDoc^.Doc.docKey, errorCode);
            if errorCode = 0 then
              AddTalon(TalonList, Talon);
            Time := Time + StrToTime('00:20');
          end;
        end;
      end;
      tempDoc := tempDoc^.next;
    end;
  end;
  2:
  begin
    write('Введите специализацию: ');
    readln(spec);
    DocArr := searchDoc(DocList, searchCompDocSpecialisation, spec);
    InputDate('Введите дату(формат DD.MM.YYYY): ', 'Некорректный ввод', Date);
    InputTime('Введите время(будут подобраны талоны в районе получаса)(формат HH:MM): ', 'Некорректный ввод', Time);
    New(tempList);
    count := 0;
    tempList^.next := nil;
    for var i := 0 to High(DocArr) do
    begin
      writeln('Врач ', DocArr[i]^.Doc.docLastName, ': ');
      DocDate.code := DocArr[i]^.Doc.docKey;
      DocDate.date := Date;
      TalonArr := searchTalon(TalonList, searchCompTalonDocDateFree, DocDate);
      for var j := 0 to High(TalonArr) do
      begin
        if Abs(TalonArr[i]^.Talon.time - Time) < StrToTime('00:30') then
        begin
          AddTalon(tempList, TalonArr[i]^.Talon);
          inc(count);
          writeln(count);
          printTalon(TalonArr[i]^.Talon);
        end;
      end;
    end;
    write('Выберите номер талона: ');
    InputMenu(count, chose);
    write('Введите ваше ФИО: ');
    tempList := GetTalon(tempList, chose);
    readln(tempList^.Talon.patientLastName);
    DocDate.code := tempList^.Talon.docKey;
    DocDate.date := Date;
    TalonArr := searchTalon(TalonList, searchCompTalonDocDate, DocDate);
    for var i := 0 to High(TalonArr) do
    begin
    if (TalonArr[i]^.Talon.time > tempList^.Talon.time) and (TalonArr[i]^.Talon.patientLastName <> '') then
     Dec(TalonArr[i]^.Talon.queuePos);
    end;
  end;
  end;
end;

procedure ClearTalons(head: TTalonListPt);
var
  temp: TTalonListPt;
begin
  temp := head;
  temp^.next := nil;
  head := head^.next;
  while head <> nil do
  begin
    temp := head;
    head := head^.next;
    Dispose(temp);
  end;
end;

procedure ClearDocs(head: TDocListPt);
var
  temp: TDocListPt;
begin
  temp := head;
  temp^.next := nil;
  head := head^.next;
  while head <> nil do
  begin
    temp := head;
    head := head^.next;
    Dispose(temp);
  end;
end;

procedure ReadFiles(var FTalon: TTalonFile; var FDoc: TDocFile; TalonList: TTalonListPt; DocList: TDocListPt);
var
  Talon: TTalon;
  Doc: TDoc;
begin
  Reset(FTalon);
  Reset(FDoc);
  ClearTalons(TalonList);  
  ClearDocs(DocList);
  while not EoF(FTalon) do
  begin
    read(FTalon, Talon);
    AddTalon(TalonList, Talon);
  end;
  while not EoF(FDoc) do
  begin
    read(FDoc, Doc);
    AddDoc(DocList, doc);
  end;
end;

procedure WriteFiles(var FTalon: TTalonFile; var FDoc: TDocFile; TalonList: TTalonListPt; DocList: TDocListPt);
var
  tempTalon: TTalonListPt;
  tempDoc: TDocListPt;
begin
  Rewrite(FTalon);
  Rewrite(FDoc);
  tempTalon := TalonList^.next;
  while tempTalon <> nil do
  begin
    write(FTalon, tempTalon^.Talon);
    tempTalon := tempTalon^.next;
  end;
  tempdoc := DocList^.next;
  while tempDoc <> nil do
  begin
    write(FDoc, tempdoc^.Doc);
    tempDoc := tempDoc^.next;
  end;
end;

      {
procedure Fill(TalonList: TTalonListPt; DocList: TDocListPt; var MaxKey: Integer);
var
  Schedule: TSchedule;
  errorCode: Integer;
begin
  for var i := Mon to Sat do
    with Schedule[i] do
    begin
      start := StrToTime('09:00');
      finish := StrToTime('14:00');
    end;
  AddDoc(DocList, MakeDoc(MaxKey, 'Терапевт', 'Иванов', 26, Schedule));
  AddDoc(DocList, MakeDoc(MaxKey, 'Терапевт', 'Петров', 27, Schedule));
  AddDoc(DocList, MakeDoc(MaxKey, 'Педиатр', 'Петрова', 28, Schedule));
  AddTalon(TalonList, MakeTalon(TalonList, DocList, StrToDate('24.03.2025'), StrToTime('09:00'), 'Шимко', 1, errorCode));
  AddTalon(TalonList, MakeTalon(TalonList, DocList, StrToDate('24.03.2025'), StrToTime('10:00'), 'Арещенко', 1, errorCode));
  AddTalon(TalonList, MakeTalon(TalonList, DocList, StrToDate('24.03.2025'), StrToTime('11:00'), 'Коршунов', 1, errorCode));
  AddTalon(TalonList, MakeTalon(TalonList, DocList, StrToDate('25.03.2025'), StrToTime('09:00'), 'Шимко', 2, errorCode));
  AddTalon(TalonList, MakeTalon(TalonList, DocList, StrToDate('25.03.2025'), StrToTime('10:00'), 'Арещенко', 2, errorCode));
  AddTalon(TalonList, MakeTalon(TalonList, DocList, StrToDate('25.03.2025'), StrToTime('11:00'), 'Коршунов', 2, errorCode));
  AddTalon(TalonList, MakeTalon(TalonList, DocList, StrToDate('26.03.2025'), StrToTime('09:00'), 'Шимко', 3, errorCode));
  AddTalon(TalonList, MakeTalon(TalonList, DocList, StrToDate('26.03.2025'), StrToTime('10:00'), 'Арещенко', 3, errorCode));
  AddTalon(TalonList, MakeTalon(TalonList, DocList, StrToDate('26.03.2025'), StrToTime('11:00'), 'Коршунов', 3, errorCode));
end;          }

var
  TalonList: TTalonListPt;
  DocList: TDocListPt;
  isOn: boolean;
  temp: integer;
  MaxKey: Integer;
  FDoc: TDocFile;
  FTalon: TTalonFile;

begin
  New(TalonList);
  TalonList^.next := nil;
  New(DocList);
  DocList^.next := nil;
  //fill(TalonList, DocList, MaxKey);
  isOn := true;
  MaxKey := 0;
  Assign(FTalon, 'Talons.dat');
  Assign(FDoc, 'Docss.dat');
  while isOn do
  begin
    MainMenu;
    InputMenu(10, temp);
    case temp of
    1:
      ReadFiles(FTalon, FDoc, TalonList, DocList);
    2:
      LookList(TalonList, DocList);
    3:
      SortList(TalonList, DocList);
    4:
      SearchList(TalonList, DocList);
    5:
      AddList(TalonList, DocList, MaxKey);
    6:
      DeleteList(TalonList, DocList);
    7:
      ChangeList(TalonList, DocList);
    8:
      SpecialFunctions(TalonList, DocList);
    9:
      isOn := false;
    10:
    begin
      isOn := false;
      WriteFiles(FTalon, FDoc, TalonList, DocList);
    end;
    end;
  end;
  ClearTalons(TalonList);
  Dispose(TalonList);
  ClearDocs(docList);
  Dispose(DocList);
end.
